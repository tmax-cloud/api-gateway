---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: dashboard-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
    - traefik
  routes:
    - match: PathPrefix(`/api`, `/dashboard`, `/`) && Host(`dashboard.172.23.4.206.nip.io`)
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
      middlewares:
        - name: dashboard-auth@file
  tls: {} # use default tls
  # tls:
  # secretName: api-gateway-server-tls
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: console-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
    - websecure
  #  - web
  routes:
    - kind: Rule
      match: PathPrefix(`/`, `/static/`, `/api/resource/`, `/api/console/`) && Host(`console.172.23.4.206.nip.io`)
      services:
        - name: console-service@file
          kind: TraefikService
#  tls: {} # use default tls
#  tls:
#    secretName: api-gateway-server-tls

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: kubernetes-stripprefix
  namespace: api-gateway-system
spec:
  stripPrefix:
    prefixes:
      - "/api/kubernetes"
    forceSlash: true

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: kubernetes-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
  - websecure
#  - web
  routes:
  - kind: Rule
    match: PathPrefix(`/api/kubernetes`) && Host(`console.172.23.4.206.nip.io`)
    # match: PathPrefix(`/api/kubernetes`) 
    priority: 100    
    middlewares:
    - name: jwt-decode-auth@file
    - name: kubernetes-stripprefix
      namespace: api-gateway-system
    services: 
    - kind: Service
      name: kubernetes
      namespace: default
      port: https
      scheme: https
      serversTransport: kubernetes@file
  tls: {} # use default tls
#  tls:
#    secretName: api-gateway-server-tls

# apiVersion: traefik.containo.us/v1alpha1
# kind: ServersTransport
# metadata:
#   name: insecure-transport
#   namespace: api-gateway-system
# spec:
#   insecureSkipVerify: true
---

apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: hypercloud-stripprefix
  namespace: api-gateway-system
spec:
  stripPrefix:
    prefixes:
      - "/api/hypercloud"
      - "/api/multi-hypercloud"
      - "/api/webhook"
    # forceSlash: true
---

apiVersion: traefik.containo.us/v1alpha1
kind: ServersTransport
metadata:
  name: hypercloud-transport
  namespace: api-gateway-system
spec:
  rootCAsSecrets:
    - tmaxcloud-gateway-selfsigned
  serverName: hypercloud5-api-server-service.hypercloud5-system.svc
---

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: hypercloud-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
  - websecure
#  - web
  routes:
  - kind: Rule
    match: PathPrefix(`/api/hypercloud`, `/api/multi-hypercloud`,`/api/webhook`) && Host(`console.172.23.4.206.nip.io`)
    priority: 100    
    middlewares:
    - name: jwt-decode-auth@file
    - name: hypercloud-stripprefix
      namespace: api-gateway-system
    services:
    - kind: Service
      name: hypercloud5-api-server-service
      namespace: hypercloud5-system
      port: https
      scheme: https
      serversTransport: hypercloud-transport
  tls: {} # use default tls 
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: monitoring-stripprefix
  namespace: api-gateway-system
spec:
  stripPrefix:
    prefixes:
      - "/api/prometheus"
      - "/api/alertmanager"
    # forceSlash: true
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: monitoring-stripprefix-tenancy
  namespace: api-gateway-system
spec:
  stripPrefix:
    prefixes:
      - "/api/prometheus-tenancy"
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: monitoring-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
    - websecure
  #  - web
  routes:
    - kind: Rule
      match: PathPrefix(`/api/prometheus-tenancy/api`) && Host(`console.172.23.4.206.nip.io`)
      priority: 100
      middlewares:
        - name: monitoring-stripprefix-tenancy
          namespace: api-gateway-system
        - name: jwt-decode-auth@file
      services:
        - kind: Service
          name: prometheus-k8s
          namespace: monitoring
          port: web
          scheme: http
    - kind: Rule
      match: PathPrefix(`/api/prometheus/api`) && Host(`console.172.23.4.206.nip.io`)
      priority: 100
      middlewares:
        - name: monitoring-stripprefix
          namespace: api-gateway-system
        - name: jwt-decode-auth@file
      services:
        - kind: Service
          name: prometheus-k8s
          namespace: monitoring
          port: web
          scheme: http
    - kind: Rule
      match: PathPrefix(`/api/alertmanager/api`) && Host(`console.172.23.4.206.nip.io`)
      priority: 100
      middlewares:
        - name: monitoring-stripprefix
          namespace: api-gateway-system
        - name: jwt-decode-auth@file
      services:
        - kind: Service
          name: alertmanager-main
          namespace: monitoring
          port: web
          scheme: http
  tls: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: k8s-ingressroute
  namespace: api-gateway-system
spec:
  entryPoints:
    - k8s
  routes:
    - kind: Rule
      match: PathPrefix(`/`) && Host(`kubernetes.172.23.4.206.nip.io`)
      services:
        - name: kubernetes
          namespace: default
          port: https
          scheme: https
          serversTransport: kubernetes@file
  tls: {}
---

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-bu: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: kafka-1
  namespace: api-gateway-system
spec:
  entryPoints:
    - "9001"
  routes:
    - match: HostSNI(`*`)
      services:
        - name: kafka-1
          namespace: hyperauth
          port: 9093
          scheme: https
          serversTransport: insecure@file
  tls: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-bu: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: kafka-2
  namespace: api-gateway-system
spec:
  entryPoints:
    - "9002"
  routes:
    - match: HostSNI(`*`)
      services:
        - name: kafka-2
          namespace: hyperauth
          port: 9093
          scheme: https
          serversTransport: insecure@file
  tls: {}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-bu: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: kafka-3
  namespace: api-gateway-system
spec:
  entryPoints:
    - "9003"
  routes:
    - match: HostSNI(`*`)
      services:
        - name: kafka-3
          namespace: hyperauth
          port: 9093
          scheme: https
          serversTransport: insecure@file
  tls: {}
